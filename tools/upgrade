#!/usr/bin/ruby

require 'rubygems'
require 'pg'

Dir.chdir('/opt/tempus')

# Fetch the new version
Kernel.system('git fetch origin')

if not File.exists?('/tmp/tempus.reboot.news.txt')
  File.open('/tmp/tempus.reboot.news.txt', 'w') { |ouf|
    ouf.print "# Edit the news file here.  Lines beginning with # will be ignored\n"
    changes = `git log --format="format:- %s" master..origin/master`
    ouf.print "This reboot:\n\n"
    if changes == ''
      ouf.print "- no changes detected\n"
    else
      ouf.print changes
    end
    ouf.print "\n\n* Wish *\n"
  }
end

Kernel.system('git merge origin')

# Build the new version while editing the news
Process.fork {
  if not Kernel.system('git pull >build.log 2>&1')
    Kernel.exit(1)
  end
  if not Kernel.system('make -j3 >>build.log 2>&1')
    Kernel.exit(1)
  end
}

Kernel.system('${EDITOR} /tmp/tempus.reboot.news.txt')

# Make sure the build succeeded
pid, status = Process.wait2()
if status.exitstatus != 0
  $stderr.write "Error occurred during build.  See build.log for details\n"
  Kernel.exit(1)
end

# Read the news
news = IO.read('/tmp/tempus.reboot.news.txt')
File.unlink('/tmp/tempus.reboot.news.txt')

news.gsub!(/\r/, "")
news.gsub!(/^#.*\n/, '')     # remove commented lines

# Post the news to realm
sql = PG.connect(:user => "realm", :dbname => "tempus")
post_title = Time.now.strftime("%Y-%m-%d Reboot")
sql.exec("insert into forum_topics (forum, subject, last_updated, locked) values (10, $1, now(), false)", [post_title])
res = sql.exec('select lastval()')
topic_id = res.values[0][0].to_i
sql.exec("insert into forum_messages (topic, author, post_time, name, body) values ($1, 104, now(), $2, $3)",
         [topic_id, 'Wish', news])

# Post the news to the mud news file
old_news = IO.read('lib/text/news')
header = "\r\n-- NEWS UPDATE (#{Time.now.strftime("%m/%d")}) -----------------------------------------\r\n\r\n"
news_entry = header
news_entry += news
news_entry += old_news
File.open('lib/text/news', 'w') { | ouf|
  ouf.write(news_entry)
}

# Update dyntext entry for mud news file
File.open('lib/text/dyn/control/news.dyn') { |inf|
  File.open('lib/text/dyn/control/news.dyn.new', "w") { |ouf|
    # Copy filename
    ouf.write(inf.read(1024))
    # Write the new history entry
    ouf.write([2, Time.now.to_i].pack("ll"))
    # Write older history entries
    ouf.write(inf.read(8 * 9))
    # Skip over the last entry
    inf.read(8)
    # Rest of file is unchanged
    ouf.write(inf.read())
  }
}
File.rename('lib/text/dyn/control/news.dyn.new',
            'lib/text/dyn/control/news.dyn')

# Initiate mud reboot
Kernel.system("pkill -HUP circle")

# Remove obsoleted core files
Kernel.system("find /opt/tempus/log -name '*-core' -delete")
